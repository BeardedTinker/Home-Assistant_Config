substitutions:
  devicename: geiger
  upper_devicename: Geiger Counter
  
esphome:
  name: $devicename
  platform: ESP32
  board: esp-wrover-kit

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_key

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${upper_devicename} Fallback Hotspot
    password: "IRAstmr7OHH6"
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.57
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.252.0
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

##### BT Proxy #####
esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true
##### End BT Proxy #####

switch:
  - platform: restart
    name: ${upper_devicename} Restart

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${upper_devicename} IP Address
    ssid:
      name: ${upper_devicename} Connected SSID
    bssid:
      name: ${upper_devicename} Connected BSSID

sensor:
  - platform: pulse_counter
    pin: GPIO36
    name: ${upper_devicename}
    id: "geiger_counter"
    unit_of_measurement: 'CPM'
    on_raw_value:
      - sensor.template.publish:
          id: radiation_level
          state: !lambda 'return x / 153.8;'
  - platform: template
    name: "Radiation Level"
    id: "radiation_level"
    unit_of_measurement: 'µSv/h'
    icon: mdi:radioactive
    accuracy_decimals: 5
#  - platform: pulse_counter
#    pin: GPIO36
#    name: "Geiger Counter"
#    update_interval: 15s
#    unit_of_measurement: CPM
#    accuracy_decimals: 4
#    count_mode:
#      rising_edge: DISABLE
#      falling_edge: INCREMENT
#    internal_filter: 5us
#    count_mode:
#      rising_edge: INCREMENT
#      falling_edge: DISABLE
#    filters:
#      - multiply: 0.00812037037037
#      - devide: 123.147092360319
#  - platform: pulse_counter
#    pin: GPIO36
#    name: "Radiation level"
#    update_interval: 15s
#    unit_of_measurement: 'µSv/h'
#    accuracy_decimals: 4
#    filters:
#    - lambda: return x / 123.147092360319;

#  - platform: xiaomi_miscale
#    mac_address: 'DF:F2:FF:EE:0C:33'
#    weight:
#      name: "Xiaomi Mi Body Composition Scale Weight"
#      id: weight_miscale
#      on_value:
#        then:
#          - lambda: |-
#              if (id(weight_miscale).state >= 68 && id(weight_miscale).state <= 89) {
#                return id(weight_user1).publish_state(x);}
#              else if (id(weight_miscale).state >= 48 && id(weight_miscale).state <= 56) {
#                return id(weight_user2).publish_state(x);}
#              else if (id(weight_miscale).state >= 40 && id(weight_miscale).state <= 47.9) {
#                return id(weight_user3).publish_state(x);}
#              else if (id(weight_miscale).state >= 20 && id(weight_miscale).state <= 39) {
#                return id(weight_user4).publish_state(x);}

#    impedance:
#      name: "Xiaomi Mi Body Composition Scale Impedance"
#      id: impedance_xiaomi
#      on_value:
#        then:
#          - lambda: |-
#              if (id(weight_miscale).state >= 68 && id(weight_miscale).state <= 89) {
#                return id(impedance_user1).publish_state(x);}
#              else if (id(weight_miscale).state >= 48 && id(weight_miscale).state <= 56) {
#                return id(impedance_user2).publish_state(x);}
#              else if (id(weight_miscale).state >= 40 && id(weight_miscale).state <= 47.9) {
#                return id(impedance_user3).publish_state(x);}
#              else if (id(weight_miscale).state >= 20 && id(weight_miscale).state <= 39) {
#                return id(impedance_user4).publish_state(x);}

#  - platform: template
#    name: Weight Andrej
#    id: weight_user1
#    unit_of_measurement: 'kg'
#    icon: mdi:weight-kilogram
#    accuracy_decimals: 2
#  - platform: template
#    name: Impedance Andrej
#    id: impedance_user1
#    unit_of_measurement: 'ohm'
#    icon: mdi:omega
#    accuracy_decimals: 0
#  - platform: template
#    name: Weight Mirta
#    id: weight_user2
#    unit_of_measurement: 'kg'
#    icon: mdi:weight-kilogram
#    accuracy_decimals: 2
#  - platform: template
#    name: Impedance Mirta
#    id: impedance_user2
#    unit_of_measurement: 'ohm'
#    icon: mdi:omega
#    accuracy_decimals: 0
#  - platform: template
#    name: Weight Luka
#    id: weight_user3
#    unit_of_measurement: 'kg'
#    icon: mdi:weight-kilogram
#    accuracy_decimals: 2
#  - platform: template
#    name: Impedance Luka
#    id: impedance_user3
#    unit_of_measurement: 'ohm'
#    icon: mdi:omega
#    accuracy_decimals: 0
#  - platform: template
#    name: Weight Zita
#    id: weight_user4
#    unit_of_measurement: 'kg'
#    icon: mdi:weight-kilogram
#    accuracy_decimals: 2
#  - platform: template
#    name: Impedance Zita
#    id: impedance_user4
#    unit_of_measurement: 'ohm'
#    icon: mdi:omega
#    accuracy_decimals: 0

binary_sensor:
  - platform: template
    device_class: safety
    name: "Radiation Warning"
    lambda: |-
      if (id(geiger_counter).state > 100) {
        // High Count.
        return true;
      } else {
        // Normal Count.
        return false;
      }
#  - platform: xiaomi_wx08zm
#    name: Mosquito
#    mac_address: "74:A3:4A:BE:3F:D3" 
#    tablet:
#      name: "Luka Mosquito Tablet"
#    battery_level:
#      name: "Luka Battery Level"
#  - platform: xiaomi_wx08zm
#    name: Mosquito 2
#    mac_address: "74:A3:4A:C5:ED:30"
#    tablet:
#      name: "Zita Mosquito Tablet"
#    battery_level:
#      name: "Zita Battery Level"
      
      
