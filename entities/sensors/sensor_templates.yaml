#####
# Sensor Templates
#####

platform: template
sensors:

#####
# Octoprint - Time Elapse in HH:MM:SS
# Calculcate HH:MM:SS from seconds
#####

  octoprint_time_elapsed_friendly:
    friendly_name: "OctoPrint Time Elapsed"
    value_template: "{{ states('sensor.octoprint_time_elapsed') | int | timestamp_custom('%H:%M:%S', 0) }}"

#####
# Octoprint - Time Remaining in HH:MM:SS
# Calculcate HH:MM:SS from seconds
#####

  octoprint_time_remaining_friendly:
    friendly_name: "OctoPrint Time Remaining"
    value_template: "{{ states('sensor.octoprint_time_remaining') | int | timestamp_custom('%H:%M:%S', 0) }}"

#####
# Get deatiled info from LG TV - used to check if kids watch toom much TV
# Used for automation later on
#####

  media_player_title:
    value_template: '{{ state_attr("media_player.lg_tv", "media_title") }}'
    friendly_name: Media Player Title
  media_content_type:
    value_template: '{{ state_attr("media_player.lg_tv", "media_content_type") }}'
    friendly_name: Media Content Type
  media_source:
    value_template: '{{ state_attr("media_player.lg_tv", "source") }}'
    friendly_name: Media Source

#####
# Track A/B week for school schedule
# We need to know if it's odd or even week because of morning/afternoon school
#####

  current_week:
#    entity_id: sensor.date
    friendly_name: "School week"
    value_template: >-
      {% set week_number = now().isocalendar()[1] %}
      Week {{'A' if week_number % 2 == 0 else 'B'}}
#      Week {{'A' if week_number % 2 == 0 else 'B'}} (#{{week_number}})

#####
# Facebox - try to recognize face
# We try to pull name of the person recognized
#####

  facebox_detection:
    friendly_name: 'Facebox Detection'
    value_template: '{{ states.image_processing.facebox_saved_image.attributes.faces[0]["name"].title()}}'   # old - to be removed after testing
#    value_template: '{{ state_attr("image_processing.facebox_saved_image", "faces[0][''name''].title()")}}'

# Check for low batteries
  low_batteries:
    friendly_name: Low batteries
    value_template: >-
      {%- for state in states if state.attributes.battery_level or state.attributes.battery -%}
        {%- set battery = state.attributes.battery_level or state.attributes.battery -%}
        {%- if battery == 'High' -%}
          {%- set battery = 100 -%}
        {%- endif -%}
        {%- if battery | int < 30 -%}
          {{state.attributes.friendly_name}}
        {%- endif -%}
      {%- endfor -%}
  battery_status:
    friendly_name: Batteries
    icon_template: '{% if states.sensor.low_batteries.state %}mdi:battery-10{% else %}mdi:battery{% endif %}'
#    value_template: '{% if states.sensor.low_batteries.state %}{{states.sensor.low_batteries.state}}{% else %}OK{% endif %}' # old - to be removed after testing
    value_template: '{% if states("sensor.low_batteries") %}{{states("sensor.low_batteries")}}{% else %}OK{% endif %}'


#####
# Work in progress - Daily, Monthly, Quarterly and Yearly energy usage (totals)
# Adapting https://community.home-assistant.io/t/daily-energy-monitoring/143436
#####

  daily_energy_total:
    friendly_name: 'Daily Peak and Offpeak Total'
#    entity_id:
#      - sensor.daily_energy_peak
#      - sensor.daily_energy_offpeak
    value_template: "{{ ((states('sensor.daily_energy_peak')|float + states('sensor.daily_energy_offpeak')|float) )|round(3) }}"
    unit_of_measurement: "kWh"

  monthly_energy_total:
    friendly_name: 'Monthy Peak and Offpeak Total'
#    entity_id:
#      - sensor.monthly_energy_peak
#      - sensor.monthly_energy_offpeak
    value_template: "{{ ((states('sensor.monthly_energy_peak')|float + states('sensor.monthly_energy_offpeak')|float) )|round(3) }}"
    unit_of_measurement: "kWh"

# Quarterly is not very interesting for me, but it's here

  quarterly_energy_total:
    friendly_name: 'Quarterly Peak and Offpeak Total'
#    entity_id:
#      - sensor.quarterly_energy_peak
#      - sensor.quarterly_energy_offpeak
    value_template: "{{ ((states('sensor.quarterly_energy_peak')|float + states('sensor.quarterly_energy_offpeak')|float) )|round(3) }}"
    unit_of_measurement: "kWh"

  yearly_energy_total:
    friendly_name: 'Yearly Peak and Offpeak Total'
#    entity_id:
#      - sensor.yearly_energy_peak
#      - sensor.yearly_energy_offpeak
    value_template: "{{ ((states('sensor.yearly_energy_peak')|float + states('sensor.yearly_energy_offpeak')|float) )|round(3) }}"
    unit_of_measurement: "kWh"

#####
# Trying to calculate some basic electricity costs. This is VERY rough.
# This only includes calculated daily cost (1/30 of monthly cost) not some additional possible costs
# Same for monthly cost - only peak/offpeak * kWh cost + fixed monthly cost
#####

  daily_peak_energy_cost:
    friendly_name: 'Daily Peak Energy Cost'
#    entity_id:
#      - sensor.daily_energy_peak
#      - input_number.peak_energy_cost
    value_template: "{{ ((states('sensor.daily_energy_peak')|float ) * states('input_number.peak_energy_cost')|float) }}"
#    value_template: "{{ ((states('sensor.daily_energy_peak')|float /1000) * states('input_number.peak_energy_cost')|float) }}"
    unit_of_measurement: "hrk"

  daily_offpeak_energy_cost:
    friendly_name: 'Daily Offpeak Energy Cost'
#    entity_id:
#      - sensor.daily_energy_offpeak
#      - input_number.offpeak_energy_cost
    value_template: "{{ ((states('sensor.daily_energy_offpeak')|float ) * states('input_number.offpeak_energy_cost')|float) }}"
#    value_template: "{{ ((states('sensor.daily_energy_offpeak')|float /1000) * states('input_number.offpeak_energy_cost')|float) }}"
    unit_of_measurement: "hrk"

  daily_total_energy_cost:
    friendly_name: 'Daily Total Energy Cost'
#    entity_id:
#      - sensor.daily_peak_energy_cost
#      - sensor.daily_offpeak_energy_cost
#      - input_number.energy_daily_cost
    value_template: "{{ (states('sensor.daily_peak_energy_cost')|float + states('sensor.daily_offpeak_energy_cost')|float + states('input_number.energy_daily_cost')|float)|round(2) }}"
    unit_of_measurement: "hrk"

  monthly_peak_energy_cost:
    friendly_name: 'Monthly Peak Energy Cost'
#    entity_id:
#      - sensor.monthly_energy_peak
#      - input_number.peak_energy_cost
    value_template: "{{ ((states('sensor.monthly_energy_peak')|float ) * states('input_number.peak_energy_cost')|float) }}"
#    value_template: "{{ ((states('sensor.monthly_energy_peak')|float /1000) * states('input_number.peak_energy_cost')|float) }}"
    unit_of_measurement: "hrk"

  monthly_offpeak_energy_cost:
    friendly_name: 'Monthly Offpeak Energy Cost'
#    entity_id:
#      - sensor.monthly_energy_offpeak
#      - input_number.offpeak_energy_cost
    value_template: "{{ ((states('sensor.monthly_energy_offpeak')|float ) * states('input_number.offpeak_energy_cost')|float) }}"
#    value_template: "{{ ((states('sensor.monthly_energy_offpeak')|float /1000) * states('input_number.offpeak_energy_cost')|float) }}"
    unit_of_measurement: "hrk"

  monthly_total_energy_cost:
    friendly_name: 'Monthly Total Energy Cost'
#    entity_id:
#      - sensor.monthly_peak_energy_cost
#      - sensor.monthly_offpeak_energy_cost
#      - input_number.energy_monthly_cost
    value_template: "{{ (states('sensor.monthly_peak_energy_cost')|float + states('sensor.monthly_offpeak_energy_cost')|float + states('input_number.energy_monthly_cost')|float)|round(2) }}"
    unit_of_measurement: "hrk"
